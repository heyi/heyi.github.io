{"entries":[{"title":null,"url":"/404.html","date":null,"categories":[],"body":"Not found :( Sorry, but the page you were trying to view does not exist. "},{"title":"叶子绿的天空","url":"/index.html","date":null,"categories":[],"body":""},{"title":"移动开发个人总结","url":"/webapp/experience/2014/07/01/index.html","date":"2014-07-01 00:00:00 +0800","categories":["webapp","experience"],"body":"近月来，利用 angular 开发了一系列移动微站，由此积累了一些难得的经验…. 过去的经验陷井与思维定势 在开发官网的时候，引入iscroll5, 由此引发了一些问题。 光标跳动/文本框消失 滑动隐藏虚拟键盘 引发的性能问题 google之，发现这些问题很普遍。解决方案也很多，总之是个相应麻烦与 头疼的问题。 后来想，当时我为什么要用iscroll呢，仅仅是因为过去使用过，觉得很好 用，体验也不错。用在这里合适吗？ 直觉用原生滚动会更好， overflow:scrolling 兼容性检测报告 ios 有个小技巧 overflow-y: scroll; /* has to be scroll, not auto */ overflow-x: hidden; -webkit-overflow-scrolling: touch; // for safari scroll bug. 如图，不支持overflow scrolling ,overflow auto 的手机或者浏览器主要集中android 3 以下的版本。 现在android 基本是4以上，2年前的旧手机普遍是3左右; 值得注意的是uc ,在国内市场占有率是比较高的。这也是一个坑，所以在决定方案的时候，可以考虑进去。 得出的结论是，绝大多数情况下，用原生的滚动会更合适。 用sass组织css非常方便 .concat-us { .logo { background-image: url(../images/concat-us.png); height: 180px; } .info { padding: 12px; h3 { margin-bottom: 12px; } i.iconfont { font-size: 1.2rem; color : #4fbcbe; } a.email-text { color : #4fbcbe; } } } 项目中的部分sass代码片断，这种组织的好处就是方便管理，互不影响。 在设计风格多变的页面中有很大管理维护优势，缺点是提取共用性的css会比较困难. 使用渐进式 JPEG 能提升用户体验 关于progressive-jpeg 简单说明 我第一个想法就是，这个渐进式 jpeg确实很不错，有法子在部署的时候自动转换吗？ 我仔细看了下部署脚本，其中有用到 grunt-contrib-imagemin 看官方文档是有这个选项的，而且是默认选中的，很贴心了。 虚拟键盘遮挡输入框问题。 这个问题也是很普遍的， 具体表现为如果容器的布局是 –absolute– 或者 –fixed–, 点击输入框时，弹出的虚拟键盘会遮挡住输入框。我这里的表现是虚拟键盘会顶高页面,但页面会反弹回来(测试手机是红米)。 网上的解决方案不外乎二种,一种是使用iscroll ,在窗口resize事件中，重置容器的高度， 刷新iscroll,同时滚动到最底层。 另一种就是不使用iscroll ,使用定时器监控dom变化，改变容器的布局。 这二种方案的缺点是很明显的，带来的弊端且直无法忍受。 想了想，最终的法子如下： 编写了个简单的指令 app . directive ( 'scrollHere' , function ( fmyApi ) { return { restrict : 'A' , link : function ( $scope , element , attrs ) { if ( fmyApi . isPhone ) { var cnt = element . attr ( \"data-cnt\" ) || '.page-view' ; var wrapper = document . querySelector ( cnt ); element . on ( 'focusin' , function ( e ) { fmyApi . scrollTo ( wrapper , element [ 0 ], 200 ); }); $scope . $on ( '$destroy' , function () { element . off ( \"click\" ); }); } } }; }); 应用场景： <div class= \"input-container\" ng-class= '{valid:!form.name.$invalid,require:form.name.$error.required}' style= \"margin-top: 35px;\" > <span class= \"error\" ng-style= '{visibility:form.name.$error.pattern ? \"visible\" : \"hidden\"}' > 姓名至少为二个汉字! </span> <input type= \"text\" scroll-here ng-model= \"doctor.name\" class= 'form-control' name= \"name\" value= \"\" placeholder= '输入您的姓名' ng-pattern= '/[^\\x00-\\xff]{2}/' required > </div> 可以看出，不是很严谨，因为无法捕获虚拟键盘弹出事件。"},{"title":"访名医官网开发教程","url":"/webapp/experience/2014/07/02/index.html","date":"2014-07-02 00:00:00 +0800","categories":["webapp","experience"],"body":"本文是 访名医 官网的开发基本教程,为后续团队协作文档参考.. 环境搭建 osx 10.8 以上 安装node 安装 yeoman yo (脚手架工具) grunt (构建工具） bower (包管理工具) 建立项目与目录结构说明 终端输入 yo，按引导一步步建立项目。 目录如图所示： app 项目主体 bower_components 引用的类库 images 图片存放目录 index.html 程式入口文件 scripts 脚本目录 styles 样式文件目录 views 界面文件目录 node_modules node 模块包 test 测试文件包 .editorconfig 编辑器配置文件 .gitignore git 提交时会忽略的文件与目录 .jshintrc 部署时jshint 检测js文件时的配置 .travis.yml 开发环境配置文件 .bowerrc bower配置文件 karma.conf.js karma 配置信息（测试专用,目前得得比较少) Gruntfile.js 部署配置脚本 bower.json bower 包管理器配置说明 package.json npm 包管理器配置说明 引用的类库 { \"name\" : \"fmy-app\" , \"version\" : \"0.0.1\" , \"dependencies\" : { \"angular\" : \"1.2.15\" , \"json3\" : \"~3.2.6\" , \"es5-shim\" : \"~2.1.0\" , \"angular-resource\" : \"1.2.15\" , \"angular-cookies\" : \"1.2.15\" , \"angular-sanitize\" : \"1.2.15\" , \"angular-animate\" : \"1.2.15\" , \"angular-touch\" : \"1.2.15\" , \"angular-route\" : \"1.2.15\" }, \"devDependencies\" : { \"angular-mocks\" : \"1.2.15\" , \"angular-scenario\" : \"1.2.15\" } } 其中 ： angular-resource 与后台接口接处用到的类库 angular-animate 支持动画 angular-route 路由管理 angular-touch 支持touch,swipe 等事件 其它可以关注 官方文档 . 构建引用的类库说明 构建引用的类库不少，其中可以重点关注的是: grunt-contrib-imagemin 负责图片的压缩与转换 grunt-usemin 负责脚本的压缩与合并 <!--[if lte IE 9]> <!--build:css({.tmp,app}) styles/ie8.css --> <link rel= \"stylesheet\" href= \"styles/ie8.css\" > <!--endbuild --> <![endif]--> grunt-bower-install 自动插入引用的库与相关依赖脚本 <!-- build:js scripts/vendor.js --> <!-- bower:js --> <script src= \"bower_components/angular/angular.js\" ></script> <script src= \"bower_components/angular-resource/angular-resource.js\" ></script> <script src= \"bower_components/angular-cookies/angular-cookies.js\" ></script> <script src= \"bower_components/angular-sanitize/angular-sanitize.js\" ></script> <script src= \"bower_components/angular-animate/angular-animate.js\" ></script> <script src= \"bower_components/angular-touch/angular-touch.js\" ></script> <script src= \"bower_components/angular-route/angular-route.js\" ></script> <!-- endbower --> <!-- endbuild --> time-grunt 显示单个构建任务的耗时 其它详细的情况可参阅官方说明与Gruntfile.js 解耦策略与分层 想了好久，还是 维基 上的总结得最好; Angular的哲学 AngularJS是建立在这样的信念上的：即声明式编程应该用于构建用户界面以及编写软件构建， 而指令式编程非常适合来表示业务逻辑。 框架采用并扩展了传统HTML，通过双向的数据绑定来适应动态内容，双向的数据绑定允许模型和视图 之间的自动同步。因此，AngularJS使得对DOM的操作不再重要并提升了可测试性。 设计目标： 将应用逻辑与对DOM的操作解耦。这会提高代码的可测试性。 将应用程序的测试看的跟应用程序的编写一样重要。代码的构成方式对测试的难度有巨大的影响。 将应用程序的客户端与服务器端解耦。这允许客户端和服务器端的开发可以齐头并进，并且让双方的复用成为可能。 指导开发者完成构建应用程序的整个历程: 从用户界面的设计，到编写业务逻辑，再到测试。 Angular遵循软件工程的MVC模式,并鼓励展现，数据，和逻辑组件之间的松耦合.通过依赖注入（dependency injection），Angular为客户端的Web应用带来了传统服务端的服务，例如独立于视图的控制。 因此，后端减少了许多负担，产生了更轻的Web应用。 实际开发过程中,建议先熟悉官方的文档，参考最佳开发经验 重点推荐的资料主要有： angular维基文档 官方文档 开发成员需要编写视图文件 views/ .html* , 相应的控制器 scripts/controllers.js ，与数据交互服务程序 scripts/services.js 。视业务需要还需要编写自定义指令 scripts/directive.js 。 几个小技巧可以显著提高开发效率; 需求弄清楚了才动手设计. 响应式设计与响应式开发可以维护更少的版本与代码. 用sass可以更快，更清晰的组织样式. 用自定义指令编写共用的组件. 举个小粟子,响应式设计中往往要更多的考虑图片的问题，pc 可以用较大的图片，而移动端图片就需要裁剪以降低大小并突出重点。所以，设计一般会出二个图，一个是pc端的，一个是移动端。 所以前端需要判断是否是移动端，从而引用不同的图片并延迟加载. 一个误区是媒介查询不能精确反应是否是手机端，所以需要自己编写相应的指令。 app . directive ( 'responseImage' , function ( fmyApi ) { return { restrict : 'A' , scope : { phoneImg : '@phoneImg' , pcImg : '@pcImg' , }, link : function ( $scope , element , attrs ) { if ( ! fmyApi . isPhone && $scope . pcImg ) { var img = document . createElement ( \"img\" ); img . src = $scope . pcImg ; img . onload = function () { element . append ( img ); }; } if ( fmyApi . isPhone && $scope . phoneImg ) { var img = document . createElement ( \"img\" ); img . src = $scope . phoneImg ; img . onload = function () { element . append ( img ); }; } } }; }); services.js 通常是处理后台交互的程序以及一些公用函数。 使用就比较简单了： <div class='' response-image pc-img='images/law.png'></div> 更多的资料可以参考我写的开发总结, 开发中遇到的坑与总结 项目的发布 默认的发布目录是dist 实际开发过程中，多个项目可能会共享一个repository. 比如访名医官网与公益活动，这时候需要为不同的项目编写不 同的gruntfile 脚本，并指定不同的发布地址。 我探索得出的经验是： 多个项目可以共享node_modules ,package.json , 但最好不同的项目设置不同的程序主体目录，同时为了构建方便，最好不要共享bower_components. 为了发布方便，我编写了一个部署的shell脚本： function help () { echo \"It is a simple script that makes using the grunt to developing our project \" echo \"\" echo \"./install.sh app --部署官网 \" ; echo \"./install.sh app-charity --部署公益活动\" ; echo \"./install.sh all --一起部署\" ; } function deploy_app () { sed - ig 's/app-charity/app/g' . bowerrc ; git pull origin master && grunt build - f ; } function deplay_app_charity () { sed - ig 's/app\\//app-charity\\//g' . bowerrc ; git pull origin master && grunt build - f -- gruntfile Gruntfile - charity . js ; } if [ $1 ] then if [[ $1 == 'app' ]] ; then deploy_app ; fi if [[ $1 == 'app-charity' ]] ; then deplay_app_charity ; fi if [[ $1 == 'all' ]] ; then deploy_app ; deplay_app_charity ; fi else help ; fi "},{"title":"医院微站接口数据","url":"/port/2014/07/03/index.html","date":"2014-07-03 00:00:00 +0800","categories":["port"],"body":"访名医医院微站点 数据参考，后台可以参考开发接口.. 名医介绍 [ { \"id\" : \"1\", \"name\":\"王维\", \"position\":\"主任医师\", \"department\":\"消化科\", \"logo\":\"images/doctor-photo0.jpg\", \"special\":\"专治消化不良、胃溃疡、急性胃炎、慢性胃炎、十二指肠溃疡。\" } ] 医院简介 { \"id\":\"001\", \"site\":\"http://www.nc120.cn/\", \"name\":\"南充中心医院\", \"logo\":\"images/hp-icon.png\", \"banner\":\"images/hp-banner.png\", \"content\":\".....\" } 科室介绍 [ { \"name\":\"肿瘤科\", \"logo\":\"images/office0.png\", \"content\":\" 肿瘤科：肿瘤科分为肿瘤内科和肿瘤外科，肿瘤内科 主要从事各种良、恶性肿瘤的内科治疗； \" }, { \"name\":\"心血管内科\", \"logo\":\"images/office1.png\", \"content\":\"心内科，即心血管内科，是各级医院大内科为了诊疗心血管血管疾病而设置的一个临床\" }, { \"name\":\"中西医结合科\", \"logo\":\"images/office2.png\", \"content\":\"中西医结合治疗胰腺炎 中西医结合科重点专病中西医结合治疗急性胰腺炎\" }, { \"name\":\"肾内科\", \"logo\":\"images/office3.png\", \"content\":\"肾脏病是常见病和多发病，如果恶化可以发展为尿毒症，严重危害人们健康\" }, { \"name\":\"风湿免疫科\", \"logo\":\"images/office4.png\", \"content\":\"是医院内科学领域中的新兴的一种学科，主要研究和治疗风湿免疫类疾病\" } ] 医院动态 [ { \"name\":\"我院第五党总支组织参观张思德纪念馆\", \"logo\":\"images/office0.png\", \"content\":\" 为深入开展党的群众路线教育实践活动，牢固树立“全心全意为人民服务”的宗旨意识 \" } ] 心脑血管疾病评估报告 { \"user\" : { \"name\" : \"张君\", \"sex\" : \"男\", \"age\" : \"39\", \"sequence\": \"20140501\", \"id\" : \"430902198801010510\", \"tel\": \"18773112176\" }, \"report\": { \"result\": \"不稳定性心绞痛\", \"inDate\" : \"2012-09-10\", \"outDate\" : \"2012-10-10\", \"surgeryDate\" : \"2012-10-05\", \"isSmoking\" : \"否\", \"height\" : \"170.00\", \"weight\" : \"70.00\", \"address\" : \"东坝乡二条胡同23号\", \"tel\" : \"010-1111111\", \"chief\" : \"xxx\", \"physician\" : \"xxx\", \"residency\": \"xxx\", \"assess\": \"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\", \"analysis\": \"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\", \"info\": \"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\", \"scheme\": \"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\", \"info\": \"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\", \"planning\": \"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\" } } 问卷调查 [ { \"question\" : \"您目前是否吸烟\", \"options\" : [\"是\",\"否\"], \"isSingle\" : true }, { \"question\" : \"有无饮酒史\", \"options\" : [\"是\",\"否\"], \"isSingle\" : true }, { \"question\" : \"您是否了解自己的血压情况\", \"options\" : [\"患有高血压\",\"血压正常\",\"测过但不清楚\",\"从未测过\"], \"isSingle\" : false }, {\"question\" : \"每天吃多少蔬菜\" } ] 用户信息 { \"user\" : { \"name\" : \"张君\", \"sex\" : \"男\", \"age\" : \"39\", \"sequence\": \"20140501\", \"id\" : \"430902198801010510\", \"tel\": \"18773112176\" }, \"report\": { \"result\": \"不稳定性心绞痛\", \"inDate\" : \"2012-09-10\", \"outDate\" : \"2012-10-10\", \"surgeryDate\" : \"2012-10-05\", \"isSmoking\" : \"否\", \"height\" : \"170.00\", \"weight\" : \"70.00\", \"address\" : \"东坝乡二条胡同23号\", \"tel\" : \"010-1111111\", \"chief\" : \"xxx\", \"physician\" : \"xxx\", \"residency\": \"xxx\" } } 选择科室 [ { \"id\" : \"1\", \"name\":\"口腔内科\", \"expert\":\"3\", \"doctor\":\"12\", \"price\":\"92\", \"logo\":\"&#xe659;\" }, { \"id\" : \"2\", \"name\":\"心脏内科\", \"expert\":\"3\", \"doctor\":\"12\", \"price\":\"92\", \"logo\":\"&#xe65d;\" }, { \"id\" : \"3\", \"name\":\"中西结合\", \"expert\":\"3\", \"doctor\":\"12\", \"price\":\"92\", \"logo\":\"&#xe65f;\" }, { \"id\" : \"4\", \"name\":\"心脏外科\", \"expert\":\"3\", \"doctor\":\"12\", \"price\":\"92\", \"logo\":\"&#xe65e;\" }, { \"id\" : \"5\", \"name\":\"小儿心脏内科\", \"expert\":\"3\", \"doctor\":\"12\", \"price\":\"92\", \"logo\":\"&#xe65c;\" }, { \"id\" : \"6\", \"name\":\"肾脏内科\", \"expert\":\"3\", \"doctor\":\"12\", \"price\":\"92\", \"logo\":\"&#xe65d;\" }, { \"id\" : \"7\", \"name\":\"全科医学\", \"expert\":\"3\", \"doctor\":\"12\", \"price\":\"92\", \"logo\":\"&#xe65a;\" }, { \"id\" : \"8\", \"name\":\"超声科\", \"expert\":\"3\", \"doctor\":\"12\", \"price\":\"92\", \"logo\":\"&#xe658;\" }, { \"id\" : \"9\", \"name\":\"病理科\", \"expert\":\"3\", \"doctor\":\"12\", \"price\":\"92\", \"logo\":\"&#xe656;\" }, { \"id\" : \"10\", \"name\":\"产科\", \"expert\":\"3\", \"doctor\":\"12\", \"price\":\"92\", \"logo\":\"&#xe657;\" } ] 医生详情（包括可以预约的时间) { \"id\" : \"1\", \"name\":\"王维\", \"position\":\"主任医师 (高级职称)\", \"department\":\"消化科\", \"logo\":\"images/doctor-photo0.jpg\", \"special\":\"专治消化不良、胃溃疡、急性胃炎、慢性胃炎、十二指肠溃疡。\", \"times\" : [ { \"id\" : \"01\", \"time\" : \"2014-05-01 09:00 \", \"price\" : \"40元\" }, { \"id\" : \"02\", \"time\" : \"2014-05-01 19:00 \", \"price\" : \"40元\" }, { \"id\" : \"03\", \"time\" : \"2014-05-01 10:00 \", \"price\" : \"40元\" }, { \"id\" : \"04\", \"time\" : \"2014-05-01 11:00 \", \"price\" : \"40元\" }, { \"id\" : \"05\", \"time\" : \"2014-05-01 12:00 \", \"price\" : \"40元\" } ] } 选择医生 [ { \"id\" : \"1\", \"name\":\"王维\", \"position\":\"主任医师\", \"price\":\"22\", \"logo\":\"images/doctor-photo0.jpg\", \"special\":\"专治消化不良、胃溃疡、急性胃炎、慢性胃炎、十二指肠溃疡。\" }, { \"id\" : \"1\", \"name\":\"王维\", \"position\":\"主任医师\", \"price\":\"22\", \"logo\":\"images/doctor-photo0.jpg\", \"special\":\"专治消化不良、胃溃疡、急性胃炎、慢性胃炎、十二指肠溃疡。\" }, { \"id\" : \"1\", \"name\":\"王维\", \"position\":\"主任医师\", \"price\":\"22\", \"logo\":\"images/doctor-photo0.jpg\", \"special\":\"专治消化不良、胃溃疡、急性胃炎、慢性胃炎、十二指肠溃疡。\" } ] 确认订单 { \"orderId\" : \"1\", \"patientName\":\"马大哈\", \"patientId\" : \"430902198801010510\", \"sex\": \"男\", \"doctor\" : { \"name\": \"王维\", \"office\":\"消化科\", \"time\" : \"2014-05-01 09:00\", \"sequence\" : \"01\", \"captcha\" : \"888888\", \"deadline\" : \"2014-04-30 17:00\" } } 查看订单列表 [ { \"id\" : \"1\", \"name\":\"王维\", \"position\":\"主任医师\", \"isActive\" : true, \"state_text\" : \"已完成\", \"logo\":\"images/doctor-photo0.jpg\", \"special\":\"专治消化不良、胃溃疡、急性胃炎、慢性胃炎、十二指肠溃疡。\" }, { \"id\" : \"1\", \"name\":\"王维\", \"position\":\"主任医师\", \"isActive\" : false, \"state_text\" : \"已过期\", \"logo\":\"images/doctor-photo0.jpg\", \"special\":\"专治消化不良、胃溃疡、急性胃炎、慢性胃炎、十二指肠溃疡。\" }, { \"id\" : \"1\", \"name\":\"王维\", \"position\":\"主任医师\", \"isActive\" : true, \"state_text\" : \"已完成\", \"logo\":\"images/doctor-photo0.jpg\", \"special\":\"专治消化不良、胃溃疡、急性胃炎、慢性胃炎、十二指肠溃疡。\" } ] "},{"title":"实现无缝Carousel","url":"/webapp/experience/2014/08/06/index.html","date":"2014-08-06 00:00:00 +0800","categories":["webapp","experience"],"body":"最近一段时间我在重构 访名医官网 ,多了很多动画，设计也更精美。 其中有一个就是实现无缝Carousel, 结合angularjs ，我想应该是很简单的吧。之前也看过不少这方面的资料，但总是不理解，一直压在心里,成了心结了。正好，借这次机会，彻底了解下。 淘宝网首页，就有这方面的完美例子，打开开发工具，仔细观察了布局和变化后，我写下了结论。 “帧布局是5-1-2-3-4-5-1,猜测是在跳转到最后一帧的时候，取消了transition,同时快速定位到第一幁，再加上transition属性，这样肉眼就看不出来。感觉无限滚动一样。”,我问了群里的朋友，一位朋友用 例子 证实了我的猜测，这大大增强了我的信心。 以前的项目，我用过 angular-carousel ,不是无缝实现，而且用起来也感觉不好，多了不可控的因素，但实现源码还是值得一看的，很有启发。 所以决定自己实现一个，花了大约一天的时间，反复测试后，终于OK了。 Directive simpleCarousel 的实现 //todo 参考angular-carousel 实现动态width app . directive ( 'simpleCarousel' , function ( fmyApi ) { return { restrict : 'A' , scope : { slideIndex : \"=\" }, link : function ( $scope , element , attrs ) { //3-1-2-3-1 实现双向无缝滚动 // detect supported CSS property var transformProperty = 'transform' ; var transitionProperty = \"transition\" ; var prefix = [ 'webkit' , 'Moz' , 'O' , 'ms' ]; for ( var i = 0 ; i < prefix . length ; i ++ ) { var e = prefix [ i ] + \"Transform\" ; if ( typeof document . body . style [ e ] !== 'undefined' ) { transformProperty = e ; transitionProperty = prefix [ i ] + \"Transition\" ; break ; } }; var transV = \"transform .25s ease\" ; if ( fmyApi . isIe9 || fmyApi . isIe8 ) { transV = \"margin-left .25s ease\" ; } var childrens = element . children (), l = childrens . length ; var l = element . children (). length ; var firstC = angular . element ( childrens [ 0 ]), lastC = angular . element ( childrens [ l - 1 ]); var w = firstC [ 0 ]. clientWidth ; element . append ( firstC . clone ()). prepend ( lastC . clone ()); $scope . $watch ( \"slideIndex\" , function ( nvalue , ovalue ) { element [ 0 ]. style [ transitionProperty ] = transV ; if ( fmyApi . isIe8 || fmyApi . isIe9 ) { element [ 0 ]. style [ \"marginLeft\" ] = \"-\" + ( nvalue + 1 ) * w + \"px\" ; } else { element [ 0 ]. style [ transformProperty ] = \"translate3d(-\" + ( nvalue + 1 ) * w + \"px,0,0)\" ; } if ( nvalue == l || nvalue == - 1 ) { element . on ( \"transitionend webkitTransitionEnd oTransitionEnd otransitionend MSTransitionEnd\" , function ( e ) { element [ 0 ]. style [ transitionProperty ] = \"none\" ; if ( nvalue == l ) { if ( fmyApi . isIe8 || fmyApi . isIe9 ) { element [ 0 ]. style [ \"marginLeft\" ] = \"-\" + w + \"px\" ; } else { element [ 0 ]. style [ transformProperty ] = \"translate3d(-\" + w + \"px,0,0)\" ; } } else { if ( fmyApi . isIe8 || fmyApi . isIe9 ) { element [ 0 ]. style [ \"marginLeft\" ] = \"-\" + l * w + \"px\" ; } else { element [ 0 ]. style [ transformProperty ] = \"translate3d(-\" + l * w + \"px,0,0)\" ; } } element . off ( \"transitionend webkitTransitionEnd oTransitionEnd otransitionend MSTransitionEnd\" ); }); } }); } }; }); 页面布局 <div class= 'carousel-wrapper' > <ul class= \"carousel-cnt\" simple-carousel slide-index= 'car1' ng-class= '[car1Active,\"c\" + car1]' > ... </ul> <img class= 'prev' src= \"images/v2/left.png\" alt= \"left\" ng-click= 'direct(\"car1\",-1)' > <img class= 'next' src= \"images/v2/right.png\" alt= \"right\" ng-click= 'direct(\"car1\",1)' > </div> 控制器 app . controller ( 'indexCtrl' , function ( $scope , $timeout , fmyApi ) { ... $scope . car1 = 0 ; $scope . car2 = 0 ; $scope . direct = function ( car , step ) { var tt = $scope [ car ] + step ; if ( tt == - 2 ) { tt = 1 ; } if ( tt == 4 ) { tt = 1 ; } $scope [ car ] = tt ; }; ... }); "},{"title":"Gitoite 简介与搭建教程","url":"/git/gitolite/mac/2014/11/04/index.html","date":"2014-11-04 00:00:00 +0800","categories":["git","gitolite","mac"],"body":"其实，每一个Git库只需要–bare -shared就可以简单实现类似共享代码库服务器的功能，在git的世界，代码都是自由share的，每个人扮演的角色，和linux系统赋予这个用户的权限有关。但如果采用这种SSH authorized_keys的方式，直接系统通过shell进行 git clone的方法，会缺少了一项很必须的权限管理——每个用户对某个repository中所有项目均拥有完整的读写权限(可通过linux系统的权限设定，但依然麻烦)，如果在一些大项目，涉及到多种角色权限，并要指定访问路径时，直接管理authorized_keys的方式，就显得力不从心，试想一下如果你要管理超过1000号人的authorized_keys？ Gitolite，是一套用来管理 authorized_keys 文件的，为git server实现了细粒度的访问控制的perl脚本。它的官方网址是: http://github.com/sitaramc/gitolite，起先，gitolite受到gitosis的影响而开发，其命名就是gitosis+lite的意思，轻量版的gitosis，目标是打造比gitosis更人性化和更稳定的软件套件。如今，gitolite不仅早已超过它的前辈gitosis，还占据了众多大型开源社区的一席之地，由它为git server管理着代码仓库的ACL，其中包括Fedora社区(管理着超10000个仓库)、KDE社区、Gentoo社区、MeeGo社区以及Kernel.org。Gitolite进行用户管理和访问控制设定的方法，是通过管理一个指定的 Git 仓库来实现。你只需要在这个指定的仓库内做好相应的设定，然后推送到服务器上，Gitolite就会随之改变运行策略。 下面是一些特征： 在服务器端，提供一个单独的unix用户 提供多用户访问 他们不是真正的用户 它们不会获得shell权限 控制对多个git仓库的访问 真正的读访问被repo层控制 写访问在branch/tag/file/directory层控制，包括谁能够rewind，create以及delete branches/tags 能够不经过root允许进行安装，假设git和perl已经被安装了 访问认证通常采用sshd，但是也可以使用httpt 它是怎样工作的 gitolite 依赖 sshd 给用户授权并提供用户名;基于此选择是否接受用户的请求。 考虑ssh模式下push命令，正常情况下（未安装gitolite）服务端会调用’git-receive-pack’,工作流如下图所示（左边的是客户端，右边的是服务端） 当你安装完gitolite并设置好用户后，gitolite-shell接管直接的命令请求方式。 ‘git-shell’程序使用ssh提供的用户名和在命令中指定的git仓库来决定用户是否有写入库的权利. 如果用户有写入的权利，git-receive-pack会触发，但这还没完，用户写入的分支/标签/文件需要被检查，gitolite 在库上设置了修改的钩子程序。如下图所示： gitolite-admin 仓库 gitolite 通过gitolite-admin这个特殊的库来做管理git库的工作，包括但不限于管理用户，授权。 大部分的日常管理工作可能通过克隆这个库，做一些配置方面的修改，然后提交到服务器端就可以了。 特别的，库中包含”keydir”文件夹，里面是管理员和相关的用户公钥文件。 其次是”conf/gitolite.conf”配置文件，你可以在文件中设置权限规则。 一个简单的例子： # these lines were already in the file repo foo RW+ = alice RW = bob # these lines were added just now repo bar RW+ = bob R = alice 当这个文件提交到服务器时，会发生什么呢，如下所示： git-receive-pack会调用gitolite-admin库中的’post-update’钩子程序。 Gitolite 检查keydir中公钥文件，同时用这些公钥来修改ssh的授权文件，让ssh知道哪些是合法的用户。 更新 ~/.gitolite 的一些中间文件。 一些在 conf/gitolite.conf 中提及的库，但 ~/repositories 中不存在，则创建之 为每一个库更新与权限相关的文件。 在开始之前 需要的技能 安装gitolite后，你将是系统管理员，需要熟悉ssh. 熟悉git. Unix shell. 一些简单的正则表达式，有助你更好设置管理规则. 服务器端 Unix 系统. Git 版本在1.6.6以上. Perl在5.8.8以上. Openssh. 通常，gitolite运行在一个用户不能直接访问的主机上，你采用其他的一些用户名登录，然后使用su -git命令。 在此，没有密钥被用来获取shell访问，因此没有冲突。 另外的方法是使用两个不同的密钥，用别名来区分。 客户端 Openssh. Git 版本在1.6.6以上. 安装准备工作 以mac环境安装gitolite为例. 假设服务器名称为gitbox. 1. 在本地用ssh-keygen生成会话钥匙 ssh-keygen -t rsa -f id_rsa 将公钥上传到服务器 ~/.ssh/ 目录下 ssh-copy-id -i ~/.ssh/id_rsa.pub git@gitbox 以git身份登陆服务器 ssh git@gitbox 如果git用户不存在，则需要以管理员的身份登陆到gitbox ,并添加git用户. sudo adduser --system --shell /bin/bash --group git sudo adduser git ssh udo adduser git sudo 确保 ~/.ssh/authorized_keys 是空的或者不存在 将之前上传的id_rsa.pub copy 到 $HOME/alice.pub sudo cp ~/.ssh/git_rsa.pub $HOME/alice.pub 接下来，就可以用下面的命令安装了。 git clone git://github.com/sitaramc/gitolite mkdir -p $HOME/bin gitolite/install -to $HOME/bin 最后，设置你自己为管理员 $HOME/bin/gitolite setup -pk alice.pub 在客户端管理用户与库 运行 git clone git@gitbox:gitolite-admin . 用各种渠道收集协作开发队员的公用钥，并改名copy到 keydir/ 目录下。 然后 git add keydir; git commit; git push; 具体如图所示： 编辑配置文件 编辑 conf/gitolite.conf 例子如下： # sample conf/gitolite.conf file @staff = dilbert alice # groups @projects = foo bar repo @projects baz # repos RW+ = @staff # rules - master = ashok RW = ashok R = wally option deny-rules = 1 # options config hooks.emailprefix = '[%GL_REPO] ' # git-config 上面的例子定义了开发团队，项目组，并为开发团队，队员，进行了详细的授权。 repo foo bar RW+ = alice @teamleads - master = dilbert @devteam - refs/tags/v[0-9] = dilbert @devteam RW+ dev/ = dilbert @devteam RW = dilbert @devteam R = @managers alice and the team leads can do whatever they want (i.e., push, rewind, or delete any branch or tag). dilbert and the dev team has these restrictions they can do anything to branches whose names start with “dev/” they can create or fast-forward push, but not rewind or delete, any branch except master they can create (but not update/delete) any tag except tags starting with “v” followed by a digit. managers can read the repo but they can’t push anything. 基本语法 通常来说，所有的元素都是用空格隔开的；没有逗号，分号，以及其他的东西。 注释通常用shell的样式，# 用户名和repo名字一样，它们都以字母开始，但是可以用点，下划线，减号连接 用户名可以选择用@符号后面跟一个至少包含一个点号的域名 组名与用户名类似，以@开头 repo的名字里可以包含/符号 默认没有续行的功能，你不需要它们。 权限规则说明 R, to allow read operations only RW, to allow fast-forward push of a branch, or create new branch/tag RW+, to allow pretty much anything – fast-forward, rewind or delete branches or tags ”-” (the minus sign), to deny access. "}]}